using Application.Common.Exceptions;
using Application.Common.Repositories;
using Application.Common.Responses;
using Application.Common.UnitOfWork;
using Domain.Common;
using {{EntityNamespace}};
using MediatR;
using Newtonsoft.Json;
using Shared.Constants;

namespace {{CqrsNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Commands;

{{#Entity}}
public class Update{{Name}}Command : {{Name}}BaseCommand, IRequest<ResponseBase<{{Name}}>>
{
    [JsonIgnore]
    public {{IdType}} Id { get; private set; }

    public Update{{Name}}Command SetId({{IdType}} id)
    {
        Id = id;
        return this;
    }
}

public class Update{{Name}}CommandHandler(IUnitOfWork unitOfWork)
    : IRequestHandler<Update{{Name}}Command, ResponseBase<{{Name}}>>
{
    private readonly IWriteRepository<{{Name}}> _{{VarName}}Repository = unitOfWork.GetRepository<{{Name}}>();

    public async Task<ResponseBase<{{Name}}>> Handle(Update{{Name}}Command request, CancellationToken cancellationToken)
    {
        var {{VarName}} =
            await _{{VarName}}Repository.GetFirstOrDefaultAsync(predicate: {{VarAbbr}} => {{VarAbbr}}.Id == request.Id, disableTracking: false)
            ?? throw new NotFoundException(MessageCommon.SetEntityNotFound(nameof({{Name}}), request.Id));

        {{VarName}}.Update({{Params}});

        _{{VarName}}Repository.Update({{VarName}});
        await unitOfWork.SaveChangesAsync();

        return new ResponseBase<{{Name}}>({{VarName}}, MessageCommon.UpdateSuccess);
    }
}{{/Entity}}