using Domain.Common;
using {{CqrsNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Commands;
using Application.Common.Exceptions;
using {{EntityNamespace}};
using Shared.Constants;

namespace {{TestNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Commands;

{{#Entity}}
public class Update{{Name}}CommandTest : MockWriteRepositoryTestBase<{{Name}}>
{
    private readonly Update{{Name}}CommandHandler _handler;

    public Update{{Name}}CommandTest()
    {
        _handler = new Update{{Name}}CommandHandler(UnitOfWork);
    }

    [Fact]
    public async Task ShouldUpdate()
    {
{{#EntityFields}}
        {{{Mock}}}
{{/EntityFields}}
        {{AssignmentToUpdate}}

        await Repository.InsertAsync(new {{Name}}
        {
{{ParamInitNonObject}}
        });
        await UnitOfWork.SaveChangesAsync();

        int id = await Repository.GetFirstOrDefaultAsync(predicate: s => s.{{FieldToCheckCreate}} == {{VarToCheckCreate}}, selector: {{VarAbbr}} => {{VarAbbr}}.Id);

        var command = new Update{{Name}}Command
        {
{{UpdateParamInit}}
        };
        command.SetId(id);

        var response = await _handler.Handle(command, CancellationToken.None);

        response.Message.Should().Be(MessageCommon.UpdateSuccess);
        (await Repository.GetFirstOrDefaultAsync(predicate: {{VarAbbr}} => {{VarAbbr}}.{{FieldToCheckCreate}} == {{VarToCheckCreate}}))
            .Should()
            .BeNull();
        (await Repository.GetFirstOrDefaultAsync(predicate: {{VarAbbr}} => {{VarAbbr}}.{{FieldToCheckCreate}} == new{{FieldToCheckCreate}}))
            .Should()
            .NotBeNull();
    }

    [Fact]
    public async Task ShouldThrowNotFoundException()
    {
        var command = new Update{{Name}}Command();
        command.SetId(99);
        await Assert.ThrowsAsync<NotFoundException>(() => _handler.Handle(command, CancellationToken.None));
    }
}{{/Entity}}