using {{CqrsNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Queries;
using {{CqrsNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Specs;
using Application.Common.Exceptions;
using {{EntityNamespace}};
using {{DtoNamespace}};

namespace {{TestNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Queries;

{{#Entity}}
public class Get{{Name}}ByIdQueryTest : MockReadRepositoryTestBase<{{Name}}>
{
    private readonly Get{{Name}}ByIdQueryHandler _handler;

    public Get{{Name}}ByIdQueryTest()
    {
        _handler = new Get{{Name}}ByIdQueryHandler(MockRepository.Object);
    }

    [Fact]
    public async Task HandleWithExistingIdShouldReturn{{Name}}()
    {
        var expected{{Name}} = new {{Name}}Dto() { Id = 1 };

        MockRepository.Setup(repo =>
                repo.FirstOrDefaultAsync(It.IsAny<{{Name}}ByIdSpec>(), It.IsAny<CancellationToken>()))
            .ReturnsAsync(expected{{Name}});

        var query = new Get{{Name}}ByIdQuery { Id = 1 };

        var response = await _handler.Handle(query, CancellationToken.None);

        Assert.NotNull(response);
        Assert.NotNull(response.Result);
    }

    [Fact]
    public async Task HandleNonExistingIdShouldThrowNotFoundException()
    {
        MockRepository.Setup(repo => repo.GetByIdAsync(It.IsAny<int>(), It.IsAny<CancellationToken>()))
            .ReturnsAsync(({{Name}}?)null);

        var query = new Get{{Name}}ByIdQuery { Id = 99 };

        await Assert.ThrowsAsync<NotFoundException>(() => _handler.Handle(query, CancellationToken.None));
    }
}{{/Entity}}