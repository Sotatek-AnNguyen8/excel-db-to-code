using {{CqrsNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Commands;
using Domain.Common;
using {{EntityNamespace}};
using Shared.Constants;

namespace {{TestNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Commands;

{{#Entity}}
public class Create{{Name}}CommandTest : MockRepositoryTestBase<{{Name}}>
{
    private readonly Create{{Name}}CommandHandler _handler;

    public Create{{Name}}CommandTest()
    {
        _handler = new Create{{Name}}CommandHandler(UnitOfWork);
    }

    [Fact]
    public async Task HandleValidCommandShouldCreate{{Name}}()
    {
{{#EntityFields}}
        {{{Mock}}}
{{/EntityFields}}

        var command = new Create{{Name}}Command
        {
{{ParamInitNonObject}}
        };

        await _handler.Handle(command, CancellationToken.None);

        mockRepository.Verify(
            repo => repo.InsertAsync(It.IsAny<{{Name}}>(), It.IsAny<CancellationToken>()),
            Times.Once);
    }
}{{/Entity}}