using {{CqrsNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Commands;
using {{EntityNamespace}};
using FluentAssertions;
using Moq;
using Shared.Constants;
using UnitTest.Application.Catalog;

namespace {{TestNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Commands;

{{#Entity}}
public class Create{{Name}}CommandTest : MockRepositoryTestBase<{{Name}}>
{
    [Fact]
    public async Task HandleValidCommandShouldCreate{{Name}}()
    {
        mockRepository.Setup(repo => repo.AddAsync(It.IsAny<{{Name}}>(), It.IsAny<CancellationToken>()))
            .ReturnsAsync(({{Name}} {{VarName}}, CancellationToken _) => {{VarName}});

{{#EntityFields}}
        {{{Mock}}}
{{/EntityFields}}

        var command = new Create{{Name}}Command
        {
{{ParamInitNonObject}}
        };

        var handler = new Create{{Name}}CommandHandler(mockRepository.Object);

        var response = await handler.Handle(command, CancellationToken.None);

        mockRepository.Verify(repo => repo.AddAsync(It.IsAny<{{Name}}>(), It.IsAny<CancellationToken>()), Times.Once);
        response.Should().NotBeNull();
        response.Message.Should().Be(MessageCommon.CreateSuccess);
    }
}{{/Entity}}