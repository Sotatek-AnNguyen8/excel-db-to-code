using {{CqrsNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Commands;
using {{EntityNamespace}};
using Shared.Constants;

namespace {{TestNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Commands;

{{#Entity}}
public class Create{{Name}}CommandTest : MockWriteRepositoryTestBase<{{Name}}>
{
    private readonly Create{{Name}}CommandHandler _handler;

    public Create{{Name}}CommandTest()
    {
        _handler = new Create{{Name}}CommandHandler(unitOfWork);
    }

    [Fact]
    public async Task ShouldCreate()
    {
{{#EntityFields}}
        {{{Mock}}}
{{/EntityFields}}

        var command = new Create{{Name}}Command
        {
{{ParamInitNonObject}}
        };

        var response = await _handler.Handle(command, CancellationToken.None);

        response.Message.Should().Be(MessageCommon.CreateSuccess);
        (await repository.GetFirstOrDefaultAsync(predicate: s => s.{{FieldToCheckCreate}} == {{VarToCheckCreate}}))
            .Should()
            .NotBeNull();
    }
}{{/Entity}}