using Application.Common.Persistence;
using Application.Common.Responses;
using {{DtoNamespace}};
using {{ParamNamespace}};
using {{EntityNamespace}};
using Mapster;
using MediatR;

namespace {{CqrsNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Queries;

{{#Entity}}
public class Get{{Name}}ByIdQuery : IRequest<ResponseBase<{{Name}}Dto>>
{
    public {{IdType}} Id { get; init; }
}

public class Get{{Name}}ByIdQueryHandler(IRepository<{{Name}}> {{VarName}}Repository) : IRequestHandler<Get{{Name}}ByIdQuery, ResponseBase<{{Name}}Dto>>
{
    public async Task<ResponseBase<{{Name}}Dto>> Handle(Get{{Name}}ByIdQuery request, CancellationToken cancellationToken)
    {
        var {{VarName}} = await {{VarName}}Repository.GetByIdAsync(request.Id, cancellationToken);
        var {{VarName}}Dto = {{VarName}}.Adapt<{{Name}}Dto>();

        return new ResponseBase<{{Name}}Dto>({{VarName}}Dto);
    }
}{{/Entity}}