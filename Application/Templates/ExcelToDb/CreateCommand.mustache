using Application.Common.Repositories;
using Application.Common.Responses;
using Application.Common.UnitOfWork;
using {{EntityNamespace}};
using MediatR;
using Shared.Constants;

namespace {{CqrsNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Commands;

{{#Entity}}
public class Create{{Name}}Command : {{Name}}BaseCommand, IRequest<ResponseBase<{{Name}}>>;

public class Create{{Name}}CommandHandler(IUnitOfWork unitOfWork)
    : IRequestHandler<Create{{Name}}Command, ResponseBase<{{Name}}>>
{
    private readonly IWriteRepository<{{Name}}> _{{VarName}}Repository = unitOfWork.GetRepository<{{Name}}>();

    public async Task<ResponseBase<{{Name}}>> Handle(Create{{Name}}Command request, CancellationToken cancellationToken)
    {
        var result = await _{{VarName}}Repository.InsertAsync({{Name}}.Create({{Params}}), cancellationToken);

        await unitOfWork.SaveChangesAsync();

        return new ResponseBase<{{Name}}>(result.Entity, MessageCommon.CreateSuccess);
    }
}{{/Entity}}