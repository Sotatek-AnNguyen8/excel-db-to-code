using Application.Common.Persistence;
using Application.Common.Responses;
using {{ValidationNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}};
using Domain.Common;
using {{EntityNamespace}};
using FluentValidation;
using MediatR;
using Shared.Constants;

namespace {{CqrsNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Commands;

{{#Entity}}
public class Create{{Name}}Command : IRequest<ResponseBase<{{Name}}>>, I{{Name}}Command
{
{{#EntityFields}}
    public {{Type}}{{^IsRequired}}?{{/IsRequired}} {{Name}} { get; set; }{{#HasDefaultValue}} = {{DefaultValue}};{{/HasDefaultValue}}
{{/EntityFields}}
}

public class Create{{Name}}CommandValidator : AbstractValidator<Create{{Name}}Command>
{
    public Create{{Name}}CommandValidator()
    {
        {{Name}}Validator.ApplyRules(this);
    }
}

public class Create{{Name}}CommandHandler(IRepository<{{Name}}> {{VarName}}Repository) : IRequestHandler<Create{{Name}}Command, ResponseBase<{{Name}}>>
{
    public async Task<ResponseBase<{{Name}}>> Handle(Create{{Name}}Command request, CancellationToken cancellationToken)
    {
        var result = await {{VarName}}Repository.AddAsync({{Name}}.Create({{Params}}), cancellationToken);

        return new ResponseBase<{{Name}}>(result, MessageCommon.CreateSuccess);
    }
}{{/Entity}}