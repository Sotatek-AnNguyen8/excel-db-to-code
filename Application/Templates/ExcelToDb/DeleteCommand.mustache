using Application.Catalog.Common.Commands;
using Application.Common.Repositories;
using Application.Common.Responses;
using Application.Common.UnitOfWork;
using {{EntityNamespace}};
using MediatR;
using Shared.Constants;

namespace {{CqrsNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Commands;

{{#Entity}}
public class Delete{{Name}}Command : DeleteBaseCommand<{{IdType}}>;

public class Delete{{Name}}CommandHandler(IUnitOfWork unitOfWork)
    : IRequestHandler<Delete{{Name}}Command, ResponseBase<IEnumerable<{{IdType}}>>>
{
    private readonly IWriteRepository<{{Name}}> _{{VarName}}Repository = unitOfWork.GetRepository<{{Name}}>();

    public async Task<ResponseBase<IEnumerable<{{IdType}}>>> Handle(
        Delete{{Name}}Command request, CancellationToken cancellationToken)
    {
        var toDelete{{NamePlural}} = await _{{VarName}}Repository.GetAllAsync(
            predicate: {{VarAbbr}} => request.Ids.Contains({{VarAbbr}}.Id),
            disableTracking: false);

        _{{VarName}}Repository.Delete(toDelete{{NamePlural}});
        await unitOfWork.SaveChangesAsync();

        return new ResponseBase<IEnumerable<{{IdType}}>>(toDelete{{NamePlural}}.Select({{VarAbbr}} => {{VarAbbr}}.Id), MessageCommon.DeleteSuccess);
    }
}{{/Entity}}