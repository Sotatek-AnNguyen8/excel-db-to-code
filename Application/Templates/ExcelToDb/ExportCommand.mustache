using Application.Common.Models;
using Application.Common.Export;
using Application.Common.Interfaces;
using Application.Common.Models;
using Application.Common.Persistence;
using {{CqrsNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Params;
using {{CqrsNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Specs;
using {{ParamNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}};
using {{EntityNamespace}};
using MediatR;

namespace {{CqrsNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Commands;

{{#Entity}}
public class Export{{Name}}Command : BaseExportCommand<Search{{Name}}Param>;

public class Export{{Name}}CommandHandler(
    IReadRepository<{{Name}}> {{VarName}}Repository,
    ISpreadsheetExporter<{{Name}}> exporter)
    : IRequestHandler<Export{{Name}}Command, ExportResult>
{
    public async Task<ExportResult> Handle(Export{{Name}}Command request, CancellationToken cancellationToken)
    {
        var spec = new Export{{Name}}Spec(request);

        var options = new ExportListOptions<{{Name}}>
        {
            Fields = request.Fields
        };

        var {{VarNamePlural}} = await {{VarName}}Repository.ListAsync(spec, cancellationToken);

        exporter.Init({{VarNamePlural}}, options);
        var fs = exporter.ExportToMemoryStream();

        return ExportResult.Spreadsheet(fs, options.FileName);
    }
}{{/Entity}}