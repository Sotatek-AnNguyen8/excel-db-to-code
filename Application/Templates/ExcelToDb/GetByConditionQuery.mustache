using Application.Common.Models;
using Application.Common.Persistence;
using Application.Common.Responses;
using {{DtoNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}};
using {{ParamNamespace}};
using Ardalis.Specification;
using Domain.Common;
using {{EntityNamespace}};
using MediatR;

namespace {{CqrsNamespace}}.{{#Entity}}{{NamePlural}}{{/Entity}}.Queries;

{{#Entity}}
public class Get{{Name}}ByConditionQuery : Search{{Name}}Param, IRequest<ResponseBase<PaginationResponse<{{Name}}Dto>>>;

public sealed class {{Name}}Spec : Specification<{{Name}}, {{Name}}Dto>, ISingleResultSpecification<{{Name}}>
{
    public {{Name}}Spec({{NullableArguments}})
    {
{{{ParamValidation}}}
    }
}

public class Get{{Name}}ByConditionQueryHandler(IRepository<{{Name}}> {{VarName}}Repository) : IRequestHandler<Get{{Name}}ByConditionQuery, ResponseBase<PaginationResponse<{{Name}}Dto>>>
{
    public async Task<ResponseBase<PaginationResponse<{{Name}}Dto>>> Handle(Get{{Name}}ByConditionQuery request, CancellationToken cancellationToken)
    {
        var spec = new {{Name}}Spec({{Params}});

        return new ResponseBase<PaginationResponse<{{Name}}Dto>>(await {{VarName}}Repository
            .PaginatedListAsync(spec, request.PageNumber, request.PageSize, cancellationToken));
    }
}{{/Entity}}